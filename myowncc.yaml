apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  annotations:
    run.tanzu.vmware.com/resolve-tkr: ""
  creationTimestamp: "2022-09-15T14:46:46Z"
  generation: 1
  name: aullahcluster
  namespace: default
  resourceVersion: "11340"
  selfLink: /apis/cluster.x-k8s.io/v1beta1/namespaces/default/clusterclasses/tanzukubernetescluster
  uid: 02b3fce3-d912-4476-9bb5-9a063022e154
spec:
  controlPlane:
    machineHealthCheck:
      maxUnhealthy: 100%
      nodeStartupTimeout: 2h0m0s
      unhealthyConditions:
      - status: Unknown
        timeout: 5m0s
        type: Ready
      - status: "False"
        timeout: 12m0s
        type: Ready
    machineInfrastructure:
      ref:
        apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        name: tkc-control-plane
        namespace: default
    metadata:
      annotations:
        run.tanzu.vmware.com/resolve-os-image: os-name=photon
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: tkc-control-plane
      namespace: default
  infrastructure:
    ref:
      apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
      kind: VSphereClusterTemplate
      name: tkc-infrastructure
      namespace: default
  patches:
  - definitions:
    - jsonPatches:
      - op: replace
        path: /spec/template/spec/className
        valueFrom:
          variable: vmClass
      selector:
        apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: replace
        path: /spec/template/spec/className
        valueFrom:
          variable: vmClass
      selector:
        apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: vmClass
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/storageClass
        valueFrom:
          variable: storageClass
      selector:
        apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/storageClass
        valueFrom:
          variable: storageClass
      selector:
        apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: storageClass
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files
        valueFrom:
          template: |
            {{ $clusterName := .builtin.cluster.name }}
            {{- range .trust.additionalTrustedCAs }}
            - contentFrom:
                secret:
                  name: {{ $clusterName }}-user-trusted-ca-secret
                  key: {{ .name }}
              owner: root:root
              path: /etc/ssl/certs/tkg-{{.name}}-ca.pem
              encoding: base64
              permissions: "0644"
            {{- end }}
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/files
        valueFrom:
          template: |
            {{ $clusterName := .builtin.cluster.name }}
            {{- range .trust.additionalTrustedCAs }}
            - contentFrom:
                secret:
                  name: {{ $clusterName }}-user-trusted-ca-secret
                  key: {{ .name }}
              owner: root:root
              path: /etc/ssl/certs/tkg-{{.name}}-ca.pem
              encoding: base64
              permissions: "0644"
            {{- end }}
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if .trust }}true{{end}}'
    name: trust
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              {{ "{{" }} ds.meta_data.hostname.split('.') | first {{ "}}" }}
            owner: root:root
            path: /etc/hostname
            permissions: "0644"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            content: |
              {{ "{{" }} ds.meta_data.hostname.split('.') | first {{ "}}" }}
            owner: root:root
            path: /etc/hostname
            permissions: "0644"
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if .trust }}true{{end}}'
    name: FilesEtcHostName
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files
        valueFrom:
          template: |
            - content: |
                {{ "{{" }} ds.meta_data.hostname.split('.') | first {{ "}}" }}
              owner: root:root
              path: /etc/hostname
              permissions: "0644"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/files
        valueFrom:
          template: |
            - content: |
                {{ "{{" }} ds.meta_data.hostname.split('.') | first {{ "}}" }}
              owner: root:root
              path: /etc/hostname
              permissions: "0644"
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if not .trust }}true{{end}}'
    name: InitFilesEtcHostName
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              [Service]
              Environment="HTTP_PROXY={{ .proxy.httpProxy }}"
              Environment="HTTPS_PROXY={{ .proxy.httpsProxy }}"
              Environment="NO_PROXY={{- range .proxy.noProxy }},{{.}}{{- end}}{{- range .builtin.cluster.network.services }},{{.}}{{- end }}{{- range .builtin.cluster.network.pods }},{{.}}{{- end }},localhost,127.0.0.1"
            owner: root:root
            path: /etc/systemd/system/containerd.service.d/http-proxy.conf
            permissions: "0644"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              [Service]
              Environment="HTTP_PROXY={{ .proxy.httpProxy }}"
              Environment="HTTPS_PROXY={{ .proxy.httpsProxy }}"
              Environment="NO_PROXY={{- range .proxy.noProxy }},{{.}}{{- end}}{{- range .builtin.cluster.network.services }},{{.}}{{- end }}{{- range .builtin.cluster.network.pods }},{{.}}{{- end }},localhost,127.0.0.1"
            owner: root:root
            path: /etc/systemd/system/kubelet.service.d/http-proxy.conf
            permissions: "0644"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            content: |
              [Service]
              Environment="HTTP_PROXY={{ .proxy.httpProxy }}"
              Environment="HTTPS_PROXY={{ .proxy.httpsProxy }}"
              Environment="NO_PROXY={{ .proxy.noProxy }}{{- range .builtin.cluster.network.services }},{{.}}{{- end }}{{- range .builtin.cluster.network.pods }},{{.}}{{- end }},localhost,127.0.0.1"
            owner: root:root
            path: /etc/systemd/system/containerd.service.d/http-proxy.conf
            permissions: "0644"
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: "content: |\n  [Service]\n  Environment=\"HTTP_PROXY={{ .proxy.httpProxy
            }}\"\n  Environment=\"HTTPS_PROXY={{ .proxy.httpsProxy }}\"\n  Environment=\"NO_PROXY={{
            .proxy.noProxy }}{{- range .builtin.cluster.network.services }},{{.}}{{-
            end }}{{- range .builtin.cluster.network.pods }},{{.}}{{- end }},localhost,127.0.0.1\"\nowner:
            root:root\npath: /etc/systemd/system/kubelet.service.d/http-proxy.conf\npermissions:
            \"0644\"          \n"
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if .proxy }}true{{end}}'
    name: proxy
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              ::1         ipv6-localhost ipv6-loopback
              127.0.0.1   localhost {{ "{{" }} ds.meta_data.hostname.split('.') | first {{ "}}" }}
            owner: root:root
            path: /etc/hosts
            permissions: "0644"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: "content: |\n  ::1         ipv6-localhost ipv6-loopback\n  127.0.0.1
            \  localhost {{ \"{{\" }} ds.meta_data.hostname.split('.') | first {{
            \"}}\" }}\nowner: root:root\npath: /etc/hosts\npermissions: \"0644\"                \n"
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: FilesEtcHostContent
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              ---
              apiVersion: apiserver.k8s.io/v1alpha1
              kind: AdmissionConfiguration
              plugins:
            owner: root:root
            path: /etc/kubernetes/extra-config/admission-control-config.yaml
            permissions: "0640"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlaneFilesAdmissionConfiguration
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            encoding: base64
            owner: root:root
            path: /etc/kubernetes/extra-config/encryption-provider-config.yaml
            permissions: "0640"
            content: |
              {{ .clusterEncryptionConfigYaml }}
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlaneFilesEncryptionConfiguration
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            owner: root:root
            path: /etc/ssl/certs/extensions-tls.crt
            permissions: "0644"
            contentFrom:
              secret:
                name: {{ .extensionCert.contentSecret.name }}
                key: {{ .extensionCert.contentSecret.key }}
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            owner: root:root
            path: /etc/ssl/certs/extensions-tls.crt
            permissions: "0644"
            contentFrom:
              secret:
                name: {{ .extensionCert.contentSecret.name }}
                key: {{ .extensionCert.contentSecret.key }}
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: ExtensionCerts
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/ntp
        valueFrom:
          template: |
            enabled: true
            servers:
            - {{ .ntp }}
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/ntp
        valueFrom:
          template: |
            enabled: true
            servers:
            - {{ .ntp }}
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: NTP
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              {{ .defaultRegistrySecret.data }}
            owner: root:root
            encoding: base64
            path: /etc/ssl/certs/{{ .defaultRegistrySecret.name }}-{{ .defaultRegistrySecret.namespace }}-ca.pem
            permissions: "0644"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            content: |
              {{ .defaultRegistrySecret.data }}
            owner: root:root
            encoding: base64
            path: /etc/ssl/certs/{{ .defaultRegistrySecret.name }}-{{ .defaultRegistrySecret.namespace }}-ca.pem
            permissions: "0644"
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if .defaultRegistrySecret }}true{{end}}'
    name: defaultRegistrySecretFile
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              apiVersion: audit.k8s.io/v1beta1
              kind: Policy
              rules:
                # The following requests were manually identified as high-volume and low-risk,
                # so drop them.
                - level: None
                  users: ["system:serviceaccount:kube-system:kube-proxy"]
                  verbs: ["watch"]
                  resources:
                    - group: "" # core
                      resources: ["endpoints", "services", "services/status"]
                - level: None
                  userGroups: ["system:nodes"]
                  verbs: ["get"]
                  resources:
                    - group: "" # core
                      resources: ["nodes", "nodes/status"]
                - level: None
                  users:
                    - system:kube-controller-manager
                    - system:kube-scheduler
                    - system:serviceaccount:kube-system:endpoint-controller
                  verbs: ["get", "update"]
                  namespaces: ["kube-system"]
                  resources:
                    - group: "" # core
                      resources: ["endpoints"]
                - level: None
                  users: ["system:apiserver"]
                  verbs: ["get"]
                  resources:
                    - group: "" # core
                      resources: ["namespaces", "namespaces/status", "namespaces/finalize"]
                # Don't log HPA fetching metrics.
                - level: None
                  users:
                    - system:kube-controller-manager
                  verbs: ["get", "list"]
                  resources:
                    - group: "metrics.k8s.io"
                # Don't log these read-only URLs.
                - level: None
                  nonResourceURLs:
                    - /healthz*
                    - /version
                    - /swagger*
                # Don't log events requests.
                - level: None
                  resources:
                    - group: "" # core
                      resources: ["events"]
                # Don't log TMC service account performing read operations because they are high-volume.
                - level: None
                  userGroups: ["system:serviceaccounts:vmware-system-tmc"]
                  verbs: ["get", "list", "watch"]
                # Don't log read requests from garbage collector because they are high-volume.
                - level: None
                  users: ["system:serviceaccount:kube-system:generic-garbage-collector"]
                  verbs: ["get", "list", "watch"]
                # node and pod status calls from nodes are high-volume and can be large, don't log responses for expected updates from nodes
                - level: Request
                  userGroups: ["system:nodes"]
                  verbs: ["update","patch"]
                  resources:
                    - group: "" # core
                      resources: ["nodes/status", "pods/status"]
                  omitStages:
                    - "RequestReceived"
                # deletecollection calls can be large, don't log responses for expected namespace deletions
                - level: Request
                  users: ["system:serviceaccount:kube-system:namespace-controller"]
                  verbs: ["deletecollection"]
                  omitStages:
                    - "RequestReceived"
                # Secrets, ConfigMaps, and TokenReviews can contain sensitive & binary data,
                # so only log at the Metadata level.
                - level: Metadata
                  resources:
                    - group: "" # core
                      resources: ["secrets", "configmaps"]
                    - group: authentication.k8s.io
                      resources: ["tokenreviews"]
                  omitStages:
                    - "RequestReceived"
                # Get responses can be large; skip them.
                - level: Request
                  verbs: ["get", "list", "watch"]
                  resources:
                    - group: "" # core
                    - group: "admissionregistration.k8s.io"
                    - group: "apiextensions.k8s.io"
                    - group: "apiregistration.k8s.io"
                    - group: "apps"
                    - group: "authentication.k8s.io"
                    - group: "authorization.k8s.io"
                    - group: "autoscaling"
                    - group: "batch"
                    - group: "certificates.k8s.io"
                    - group: "extensions"
                    - group: "metrics.k8s.io"
                    - group: "networking.k8s.io"
                    - group: "policy"
                    - group: "rbac.authorization.k8s.io"
                    - group: "settings.k8s.io"
                    - group: "storage.k8s.io"
                  omitStages:
                    - "RequestReceived"
                # Default level for known APIs
                - level: RequestResponse
                  resources:
                    - group: "" # core
                    - group: "admissionregistration.k8s.io"
                    - group: "apiextensions.k8s.io"
                    - group: "apiregistration.k8s.io"
                    - group: "apps"
                    - group: "authentication.k8s.io"
                    - group: "authorization.k8s.io"
                    - group: "autoscaling"
                    - group: "batch"
                    - group: "certificates.k8s.io"
                    - group: "extensions"
                    - group: "metrics.k8s.io"
                    - group: "networking.k8s.io"
                    - group: "policy"
                    - group: "rbac.authorization.k8s.io"
                    - group: "settings.k8s.io"
                    - group: "storage.k8s.io"
                  omitStages:
                    - "RequestReceived"
                # Default level for all other requests.
                - level: Metadata
                  omitStages:
                    - "RequestReceived"
            owner: root:root
            path: /etc/kubernetes/extra-config/audit-policy.yaml
            permissions: "0640"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            owner: root:root
            path: /var/log/kubernetes/kube-apiserver.log
            permissions: "0600"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: AuditLogging
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              ---
              apiVersion: v1
              kind: Config
              # clusters refers to the remote service.
              clusters:
                - name: guest-cluster-auth-service
                  cluster:
                    # Use the Kubernetes CA to verify the guest cluster auth service.
                    certificate-authority: /etc/ssl/certs/extensions-tls.crt         # CA for verifying the remote service.
                    server: https://localhost:5443/tokenreview
              # Users refers to the API server's webhook configuration.
              users:
                - name: guest-apiserver
                  user:
                    client-certificate: /etc/kubernetes/pki/apiserver.crt
                    client-key: /etc/kubernetes/pki/apiserver.key
              # kubeconfig files require a context. Provide one for the API server.
              current-context: webhook
              contexts:
              - context:
                  cluster: guest-cluster-auth-service
                  user: guest-apiserver
                name: webhook
            owner: root:root
            path: /etc/kubernetes/auth-webhook-config.yaml
            permissions: "0600"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlaneFilesAuthWebhookConfig
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/postKubeadmCommands
        valueFrom:
          template: |
            - touch /root/kubeadm-complete
            - vmware-rpctool 'info-set guestinfo.kubeadm.phase complete'
            - vmware-rpctool 'info-set guestinfo.kubeadm.error ---'
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/postKubeadmCommands
        valueFrom:
          template: |
            - touch /root/kubeadm-complete
            - vmware-rpctool 'info-set guestinfo.kubeadm.phase complete'
            - vmware-rpctool 'info-set guestinfo.kubeadm.error ---'
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: controlPlanePostKubeadmCommandsSuccess
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands
        valueFrom:
          template: |
            {{ $disks := splitList "/" "b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z" }}
            {{ $i := 0 }}
            {{- range .controlPlaneVolumes }}
            {{ $mountPathTransformed := .mountPath | replace "/" "_" }}
            {{ $part := "1" }}
            - umount {{ .mountPath }}
            - '[ "$(ls -A {{ .mountPath }} )" ] && mkdir -p /var/tmp/{{ $mountPathTransformed }} &&
                      mv {{.mountPath}}/* /var/tmp/{{ $mountPathTransformed }}'
            - mount -t ext4 /dev/sd{{ index $disks $i }}{{ $part }} {{ .mountPath }}
            - rm -rf {{ .mountPath }}/lost+found
            - '[ "$(ls -A /var/tmp/{{ $mountPathTransformed }})" ] && mv /var/tmp/{{ $mountPathTransformed }}/*
            {{ .mountPath }} && rmdir /var/tmp/{{ $mountPathTransformed }}'
            {{ $i = add1 $i }}
            {{- end }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/0
        valueFrom:
          template: |
            set -xe
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/volumes
        valueFrom:
          template: |
            {{- range .controlPlaneVolumes }}
            - capacity:
                storage: {{ .capacity.storage }}
              name: {{ .name }}
              {{ if .storageClass }}storageClass:  {{ .storageClass }}{{end}}
            {{- end }}
      selector:
        apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/diskSetup/filesystems
        valueFrom:
          template: |
            {{ $disks := splitList "/" "b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z" }}
            {{ $i := 0 }}
            {{- range .controlPlaneVolumes }}
            - device: /dev/sd{{ index $disks $i }}
              extraOpts:
              - -F
              filesystem: ext4
              label: ""
            {{ $i = add1 $i }}
            {{- end }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/diskSetup/partitions
        valueFrom:
          template: |
            {{ $disks := splitList "/" "b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z" }}
            {{ $i := 0 }}
            {{- range .controlPlaneVolumes }}
            - device: /dev/sd{{ index $disks $i }}
              layout: true
              overwrite: false
              tableType: gpt
            {{ $i = add1 $i }}
            {{- end }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/mounts
        valueFrom:
          template: |
            {{ $disks := splitList "/" "b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z" }}
            {{ $i := 0 }}
            {{- range .controlPlaneVolumes }}
            {{ $part := "1" }}
            - - /dev/sd{{ index $disks $i }}{{ $part }}
              - {{ .mountPath }}
            {{ $i = add1 $i }}
            {{- end }}
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    enabledIf: '{{ if .controlPlaneVolumes }}true{{end}}'
    name: controlPlaneVolumes
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            set -xe
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    enabledIf: '{{ if .controlPlaneVolumes }}true{{end}}'
    name: controlPlanePreKubeadmCommandsCmdBashOptions
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands
        valueFrom:
          template: |
            - set -xe
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    enabledIf: '{{ if not .controlPlaneVolumes }}true{{end}}'
    name: controlPlaneInitPreKubeadmCommandsCmdBashOptions
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: "cloud-init single --name write-files --frequency always     \n"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdCloudInitExecuteWriteFile
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: "cloud-init single --name users-groups --frequency always         \n"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdCloudInitAddUsers
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            vmware-rpctool 'info-set guestinfo.userdata ---'
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdClearuserData
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            hostname "{{ "{{" }} ds.meta_data.hostname.split('.') | first {{ "}}" }}"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdHostname
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            'sed -i -e "s/^preserve_hostname: .*/preserve_hostname: true/" /etc/cloud/cloud.cfg'
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdPreserveHostname
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            echo -e 'kernel.panic_on_oops=1\nkernel.panic=10\nvm.overcommit_memory=1' >> /etc/sysctl.d/kubelet.conf && sysctl -p /etc/sysctl.d/kubelet.conf
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdForEnablingProtectKernelDefaults
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep photon && /usr/bin/rehash_ca_certificates.sh || echo "not applicable"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdPhotonRehashCerts
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep ubuntu && cp /etc/ssl/certs/extensions-tls.crt >> /usr/local/share/ca-certificates/ || echo "not applicable"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdUbuntuCpExtensionsCrt
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep ubuntu && /usr/sbin/update-ca-certificates || echo "not applicable"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdUbuntuRehashCerts
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            cat /etc/kubernetes/pki/ca.crt >> /etc/ssl/certs/extensions-tls.crt
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdDockerCmdCatExtensionsAndK8sPKI
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep photon && systemctl daemon-reload || echo "not applicable"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdSystemctlReload
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            systemctl enable containerd
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdEnableContainerd
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            systemctl is-enabled --quiet containerd.service && systemctl restart containerd.service
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdContainerdRestart
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            "if systemctl is-enabled --quiet containerd.service ; then running=false; for _ in {1..15}; do crictl ps > /dev/null 2>&1 && running=true && break; sleep 1s; done; if [[ \"${running}\" != true ]]; then echo 'WARNING: containerd may not be running'; exit 1; fi; fi"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdContainerdWait
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep photon && systemctl start docker.service || echo "not applicable"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdPhotonDockerWait
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep ubuntu && systemctl enable kubelet && systemctl start kubelet || echo "Not applicable"
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsUbuntuCommonKubeletCmds
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            if [ -f /root/kubeadm-complete ]; then echo "Kubeadm already completed - terminating early"; exit 0; fi
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    name: controlPlanePreKubeadmCommandsCmdCheckKubeadmSuccess
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/authentication-token-webhook-version
        value: v1
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    enabledIf: '{{ semverCompare "^1.22" .builtin.controlPlane.version }}'
    name: controlPlaneAuthTokenWebhookVersion
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/users
        valueFrom:
          template: |
            - lockPassword: false
              name: vmware-system-user
              passwdFrom:
                secret:
                  name: {{ .user.passwordSecret.name }}
                  key: {{ .user.passwordSecret.key }}
              sshAuthorizedKeys:
              - |
                {{ .user.sshAuthorizedKey }}
              sudo: ALL=(ALL) NOPASSWD:ALL
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/users
        valueFrom:
          template: |
            - lockPassword: false
              name: vmware-system-user
              passwdFrom:
                secret:
                  name: {{ .user.passwordSecret.name }}
                  key: {{ .user.passwordSecret.key }}
              sshAuthorizedKeys:
              - |
                {{ .user.sshAuthorizedKey }}
              sudo: ALL=(ALL) NOPASSWD:ALL
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if .user }}true{{end}}'
    name: Users
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/clusterName
        valueFrom:
          variable: builtin.cluster.name
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository
            }}'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/dns/imageRepository
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository
            }}'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/dns/imageTag
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.coredns.imageTag
            }}'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/imageRepository
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository
            }}'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/imageTag
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.etcd.imageTag
            }}'
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    enabledIf: '{{ if .TKR_DATA }}true{{end}}'
    name: tkrConfiguration
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/imageName
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).osImageRef.name
            }}'
      selector:
        apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          controlPlane: true
    enabledIf: '{{ if .TKR_DATA }}true{{end}}'
    name: tkrConfigurationControlPlane
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/imageName
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.machineDeployment.version).osImageRef.name
            }}'
      selector:
        apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if .TKR_DATA }}true{{end}}'
    name: tkrConfigurationMachineDeployment
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/nodeRegistration/kubeletExtraArgs/node-labels
        valueFrom:
          template: |
            run.tanzu.vmware.com/tkr={{ index (index .TKR_DATA .builtin.controlPlane.version).labels "run.tanzu.vmware.com/tkr" }},run.tanzu.vmware.com/kubernetesDistributionVersion={{ index (index .TKR_DATA .builtin.controlPlane.version).labels "run.tanzu.vmware.com/tkr" }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/nodeRegistration/kubeletExtraArgs/node-labels
        valueFrom:
          template: |
            run.tanzu.vmware.com/tkr={{ index (index .TKR_DATA .builtin.controlPlane.version).labels "run.tanzu.vmware.com/tkr" }},run.tanzu.vmware.com/kubernetesDistributionVersion={{ index (index .TKR_DATA .builtin.controlPlane.version).labels "run.tanzu.vmware.com/tkr" }}
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:
      - op: add
        path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs/node-labels
        valueFrom:
          template: |
            run.tanzu.vmware.com/tkr={{ index (index .TKR_DATA .builtin.machineDeployment.version).labels "run.tanzu.vmware.com/tkr" }},run.tanzu.vmware.com/kubernetesDistributionVersion={{ index (index .TKR_DATA .builtin.machineDeployment.version).labels "run.tanzu.vmware.com/tkr" }},{{- range .nodePoolLabels }}{{ .key }}={{ .value }},{{- end }}
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodeLabels
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs/register-with-taints
        valueFrom:
          template: |
            {{- range $i, $e := .nodePoolTaints }}{{ if $e.value }}{{if $i}},{{end}}{{$e.key}}={{$e.value}}:{{$e.effect}}{{ else }}{{if $i}},{{end}}{{$e.key}}:{{$e.effect}}{{ end }}{{- end }}
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if .nodePoolTaints}}true{{end}}'
    name: nodePoolTaints
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands
        valueFrom:
          template: |
            {{ $disks := splitList "/" "b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z" }}
            {{ $i := 0 }}
            {{- range .nodePoolVolumes }}
            {{ $mountPathTransformed := .mountPath | replace "/" "_" }}
            {{ $part := "1" }}
            - umount {{ .mountPath }}
            - '[ "$(ls -A {{ .mountPath }} )" ] && mkdir -p /var/tmp/{{ $mountPathTransformed }} &&
                      mv {{.mountPath}}/* /var/tmp/{{ $mountPathTransformed }}'
            - mount -t ext4 /dev/sd{{ index $disks $i }}{{ $part }} {{ .mountPath }}
            - rm -rf {{ .mountPath }}/lost+found
            - '[ "$(ls -A /var/tmp/{{ $mountPathTransformed }})" ] && mv /var/tmp/{{ $mountPathTransformed }}/*
            {{ .mountPath }} && rmdir /var/tmp/{{ $mountPathTransformed }}'
            {{ $i = add1 $i }}
            {{- end }}
      - op: add
        path: /spec/template/spec/preKubeadmCommands/0
        valueFrom:
          template: |
            set -xe
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    - jsonPatches:
      - op: add
        path: /spec/template/spec/volumes
        valueFrom:
          template: |
            {{- range .nodePoolVolumes }}
            - capacity:
                storage: {{ .capacity.storage }}
              name: {{ .name }}
              {{ if .storageClass }}storageClass: {{ .storageClass }}{{end}}
            {{- end }}
      selector:
        apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    - jsonPatches:
      - op: add
        path: /spec/template/spec/diskSetup/filesystems
        valueFrom:
          template: |
            {{ $disks := splitList "/" "b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z" }}
            {{ $i := 0 }}
            {{- range .nodePoolVolumes }}
            - device: /dev/sd{{ index $disks $i }}
              extraOpts:
              - -F
              filesystem: ext4
              label: ""
            {{ $i = add1 $i }}
            {{- end }}
      - op: add
        path: /spec/template/spec/diskSetup/partitions
        valueFrom:
          template: |
            {{ $disks := splitList "/" "b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z" }}
            {{ $i := 0 }}
            {{- range .nodePoolVolumes }}
            - device: /dev/sd{{ index $disks $i }}
              layout: true
              overwrite: false
              tableType: gpt
            {{ $i = add1 $i }}
            {{- end }}
      - op: add
        path: /spec/template/spec/mounts
        valueFrom:
          template: |
            {{ $disks := splitList "/" "b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z" }}
            {{ $i := 0 }}
            {{- range .nodePoolVolumes }}
            {{ $part := "1" }}
            - - /dev/sd{{ index $disks $i }}{{ $part }}
              - {{ .mountPath }}
            {{ $i = add1 $i }}
            {{- end }}
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if .nodePoolVolumes }}true{{end}}'
    name: nodePoolVolumes
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            set -xe
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if .nodePoolVolumes }}true{{end}}'
    name: nodePoolPreKubeadmCommandsCmdBashOptions
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands
        valueFrom:
          template: |
            - set -xe
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    enabledIf: '{{ if not .nodePoolVolumes }}true{{end}}'
    name: nodePoolInitPreKubeadmCommandsCmdBashOptions
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            cloud-init single --name write-files --frequency always
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdCloudInitExecuteWriteFile
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: "cloud-init single --name users-groups --frequency always                \n"
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdAddUsers
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            vmware-rpctool 'info-set guestinfo.userdata ---'
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdClearuserData
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            hostname "{{ "{{" }} ds.meta_data.hostname.split('.') | first {{ "}}" }}"
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdHostname
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            'sed -i -e "s/^preserve_hostname: .*/preserve_hostname: true/" /etc/cloud/cloud.cfg'
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdPreserveHostname
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            echo -e 'kernel.panic_on_oops=1\nkernel.panic=10\nvm.overcommit_memory=1' >> /etc/sysctl.d/kubelet.conf && sysctl -p /etc/sysctl.d/kubelet.conf
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdForEnablingProtectKernelDefaults
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep photon && /usr/bin/rehash_ca_certificates.sh
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdPhotonRehashCerts
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep ubuntu && cp /etc/ssl/certs/extensions-tls.crt /usr/local/share/ca-certificates/
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdUbuntuCpExtensionsCrt
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep ubuntu && /usr/sbin/update-ca-certificates
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdUbuntuRehashCerts
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            systemctl set-property docker.service TasksMax=infinity
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdDockerSystemTasksLimit
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            systemctl daemon-reload
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdSystemctlReload
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            systemctl enable containerd
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdEnableContainerd
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            systemctl is-enabled --quiet containerd.service && systemctl restart containerd.service
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdContainerdRestart
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            "if systemctl is-enabled --quiet containerd.service ; then running=false; for _ in {1..15}; do crictl ps > /dev/null 2>&1 && running=true && break; sleep 1s; done; if [[ \"${running}\" != true ]]; then echo 'WARNING: containerd may not be running'; exit 1; fi; fi"
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdContainerdWait
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep photon && systemctl start docker.service
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdPhotonDockerWait
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            uname -a | grep ubuntu && systemctl enable kubelet
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdUbuntuCmdEnableKubelet
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: "uname -a | grep ubuntu && systemctl start kubelet                        \n"
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdUbuntuCmdStartKubelet
  - definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            if [ -f /root/kubeadm-complete ]; then echo "Kubeadm already completed - terminating early"; exit 0; fi
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - node-pool
    name: nodePoolPreKubeadmCommandsCmdCheckKubeadmSuccess
  variables:
  - name: TKR_DATA
    required: false
    schema:
      openAPIV3Schema:
        additionalProperties:
          properties:
            kubernetesSpec:
              properties:
                coredns:
                  properties:
                    imageTag:
                      type: string
                  type: object
                etcd:
                  properties:
                    imageTag:
                      type: string
                  type: object
                imageRepository:
                  type: string
                version:
                  type: string
              type: object
            labels:
              additionalProperties:
                type: string
              type: object
            osImageRef:
              properties:
                name:
                  type: string
              type: object
          type: object
        type: object
  - name: vmClass
    required: true
    schema:
      openAPIV3Schema:
        type: string
  - name: storageClass
    required: true
    schema:
      openAPIV3Schema:
        type: string
  - name: storageClasses
    required: false
    schema:
      openAPIV3Schema:
        items:
          type: string
        type: array
  - name: defaultStorageClass
    required: false
    schema:
      openAPIV3Schema:
        type: string
  - name: extensionCert
    required: false
    schema:
      openAPIV3Schema:
        properties:
          contentSecret:
            properties:
              key:
                type: string
              name:
                type: string
            type: object
        type: object
  - name: clusterEncryptionConfigYaml
    required: false
    schema:
      openAPIV3Schema:
        type: string
  - name: defaultRegistrySecret
    required: false
    schema:
      openAPIV3Schema:
        properties:
          data:
            type: string
          name:
            type: string
          namespace:
            type: string
        type: object
  - name: ntp
    required: false
    schema:
      openAPIV3Schema:
        type: string
  - name: user
    required: false
    schema:
      openAPIV3Schema:
        properties:
          passwordSecret:
            properties:
              key:
                type: string
              name:
                type: string
            type: object
          sshAuthorizedKey:
            type: string
        type: object
  - name: nodePoolTaints
    required: false
    schema:
      openAPIV3Schema:
        items:
          properties:
            effect:
              type: string
            key:
              type: string
            timeAdded:
              type: integer
            value:
              type: string
          type: object
        type: array
  - name: nodePoolLabels
    required: false
    schema:
      openAPIV3Schema:
        items:
          properties:
            key:
              type: string
            value:
              type: string
          type: object
        type: array
  - name: proxy
    required: false
    schema:
      openAPIV3Schema:
        properties:
          httpProxy:
            type: string
          httpsProxy:
            type: string
          noProxy:
            items:
              type: string
            type: array
        type: object
  - name: trust
    required: false
    schema:
      openAPIV3Schema:
        properties:
          additionalTrustedCAs:
            items:
              properties:
                name:
                  type: string
              type: object
            type: array
        type: object
  - name: controlPlaneVolumes
    required: false
    schema:
      openAPIV3Schema:
        items:
          properties:
            capacity:
              properties:
                storage:
                  type: string
              type: object
            mountPath:
              type: string
            name:
              type: string
            storageClass:
              type: string
          type: object
        type: array
  - name: nodePoolVolumes
    required: false
    schema:
      openAPIV3Schema:
        items:
          properties:
            capacity:
              properties:
                storage:
                  type: string
              type: object
            mountPath:
              type: string
            name:
              type: string
            storageClass:
              type: string
          type: object
        type: array
  workers:
    machineDeployments:
    - class: node-pool
      machineHealthCheck:
        maxUnhealthy: 100%
        nodeStartupTimeout: 2h0m0s
        unhealthyConditions:
        - status: Unknown
          timeout: 5m0s
          type: Ready
        - status: "False"
          timeout: 12m0s
          type: Ready
      template:
        bootstrap:
          ref:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: KubeadmConfigTemplate
            name: tkc-md
            namespace: default
        infrastructure:
          ref:
            apiVersion: vmware.infrastructure.cluster.x-k8s.io/v1beta1
            kind: VSphereMachineTemplate
            name: tkc-md
            namespace: default
        metadata:
          annotations:
            run.tanzu.vmware.com/resolve-os-image: os-name=photon
